Техплан: Исправление отображения роли и титула игрока
Цель: Сделать так, чтобы выданная админом роль корректно сохранялась и отображалась везде — в лидерборде, в моём профиле, публичном профиле и личном профиле.

1. Бэкенд (серверная часть)
1.1. Сохранение роли в базе

Таблица пользователей (users) должна иметь колонку role (строка) и, если требуется, role_icon (путь к иконке).

При изменении роли админом — обновлять это поле в БД:

python
Copy
Edit
# Пример на Flask
@app.route('/admin/set-role', methods=['POST'])
def set_role():
    data = request.json
    user_id = data['user_id']
    role = data['role']
    db.execute("UPDATE users SET role = ? WHERE id = ?", (role, user_id))
    db.commit()
    return jsonify(success=True)
1.2. API для получения роли

При запросе /api/user/:id или /api/leaderboard вместе с ником, аватаркой и статистикой возвращать role и role_icon.

json
Copy
Edit
{
  "id": 1,
  "username": "SmoK3_FuRY",
  "xp": 4651567,
  "role": "Администратор",
  "role_icon": "/icons/admin.png"
}
2. Фронтенд
2.1. Лидерборд

При отрисовке списка игроков проверять role.

Если role не пустая:

Показать под ником роль (как на втором скрине).

При желании — добавить иконку.

Пример JSX/HTML:

jsx
Copy
Edit
<div className="player-name">
  {username}
  {role && (
    <span className="player-role">
      <img src={role_icon} alt={role} />
      {role}
    </span>
  )}
</div>
2.2. Профили (мой / публичный / личный)

Данные о пользователе берутся из API /api/user/:id.

В блоке с ником вставить роль и иконку под ником (или сбоку, как на скрине).

Убедиться, что оформление одинаковое во всех профилях.

3. Реактивное обновление
После того как админ изменил роль, фронтенд должен:

Либо отправить повторный GET-запрос к API,

Либо обновить данные пользователя в локальном состоянии.

4. Проверка
Выдать тестовому пользователю роль "Администратор".

Зайти в:

Лидерборд → роль отображается.

Мой профиль → роль отображается.

Публичный профиль → роль отображается.

Личный профиль → роль отображается.

